#!/usr/bin/env bash
set -eu
. common
set -- ${cli_run:-} "$@"

# CLI handling.
cpus=1
debug_vm=
debug=false
kgdb=false
kvm=false
# norandmaps: Don't use address space randomization. Equivalent to echo 0 > /proc/sys/kernel/randomize_va_space.
# printk.time=y: log in format: "[time ] msg" for all printk messages.
# nokaslr: https://unix.stackexchange.com/questions/397939/turning-off-kaslr-to-debug-linux-kernel-using-qemu-and-gdb
#   Turned on by default since v4.12
extra_append='nokaslr norandmaps printk.devkmsg=on printk.time=y'
extra_append_after_dash=
extra_flags=
extra_flags_qemu=
gem5=false
gem5opts=
lkmc_eval=
initrd=false
initramfs=false
memory=256M
nographic=true
root=
# A dummy value that is already turned on by default and does not produce large output,
# just to prevent QEMU from emitting a warning that '' is not valid.
trace_enable=pr_manager_run
vnc=
while getopts a:c:DdE:e:f:G:ghIiKkm:T:Vx OPT; do
  case "$OPT" in
    a)
      arch="$OPTARG"
      ;;
    c)
      cpus="$OPTARG"
      ;;
    D)
      debug_vm='gdb -q -ex start --args'
      ;;
    d)
      debug=true
      extra_flags_qemu="$extra_flags_qemu -S"
      ;;
    E)
      lkmc_eval="$OPTARG"
      ;;
    e)
      extra_append="$extra_append $OPTARG"
      ;;
    f)
      extra_append_after_dash="$extra_append_after_dash $OPTARG"
      ;;
    G)
      gem5opts="$OPTARG"
      ;;
    g)
      gem5=true
      ;;
    h)
      cat build-usage.adoc 1>&2
      exit
      ;;
    I)
      initramfs=true
      ;;
    i)
      initrd=true
      ;;
    K)
      kvm=true
      ;;
    k)
      extra_append="$extra_append kgdbwait"
      # For those who want to try KDB.
      #extra_append="$extra_append kgdbwait kgdboc=kbd"
      extra_flags_qemu="$extra_flags_qemu -serial tcp::1234,server,nowait"
      kgdb=true
      ;;
    m)
      memory="$OPTARG"
      ;;
    T)
      trace_enable="$OPTARG"
      ;;
    x)
      nographic=false
      ;;
    V)
      vnc='-vnc :0'
      ;;
    ?)
      exit 2
      ;;
  esac
done
shift "$(($OPTIND - 1))"
extra_flags="$extra_flags $@"
set_common_vars "$arch" "$gem5"
images_dir="${buildroot_out_dir}/images"
if "$debug" && "$kvm"; then
  echo 'error: -d and -K are incompatible' 1>&2
  exit 1
fi
if "$initrd" || "$initramfs"; then
  ramfs=true
else
  ramfs=false
fi
if [ -n "$lkmc_eval" ]; then
  if "$ramfs"; then
    initarg="rdinit"
  else
    initarg="init"
  fi
  extra_append="${extra_append} ${initarg}=/eval_base64.sh"
  extra_append_after_dash="${extra_append_after_dash} lkmc_eval=\"$(printf "$lkmc_eval" | base64)\""
fi
if "$nographic" && [ "$arch" = x86_64 ]; then
  extra_append="$extra_append console=ttyS0"
  extra_flags_qemu="$extra_flags_qemu -nographic"
fi
if [ -n "$extra_append_after_dash" ]; then
  extra_append="${extra_append} - ${extra_append_after_dash}"
fi

if "$gem5"; then
  gem5_build_dir="${buildroot_out_dir}/build/gem5-1.0"
  gem5_src_dir="${gem5_build_dir}/gem5"
  memory="${memory}B"
  if [ "$arch" = x86_64 ]; then
    gem5_arch=X86
  else
    gem5_arch=ARM
  fi
  gem5_common="\
M5_PATH='${gem5_build_dir}/system' \
${debug_vm} \
'${gem5_src_dir}/build/${gem5_arch}/gem5.opt' \
--debug-file=trace.txt \
${gem5opts} \
-d '${m5out_dir}' \
'${gem5_src_dir}/configs/example/fs.py' \
--disk-image='${images_dir}/rootfs.ext2' \
--kernel='${buildroot_out_dir}/build/linux-custom/vmlinux' \
--mem-size=${memory} \
--num-cpus='${cpus}' \
--script='${readfile_file}' \
"
  if [ "$arch" = x86_64 ]; then
    if "$kvm"; then
      extra_flags="$extra_flags --cpu-type=X86KvmCPU"
    fi
    cmd="\
${gem5_common} \
--command-line='earlyprintk=ttyS0 console=ttyS0 lpj=7999923 root=/dev/hda ${extra_append}' \
${extra_flags} \
"
  elif [ "$arch" = arm ] || [ "$arch" = aarch64 ]; then
    # TODO why is it mandatory to pass mem= here? Not true for QEMU.
    # Anything smaller than physical blows up as expected, but why can't it auto-detect the right value?
    cmd="${gem5_common} \
--command-line='earlyprintk=pl011,0x1c090000 console=ttyAMA0 lpj=19988480 rw loglevel=8 mem=${memory} root=/dev/sda ${extra_append}' \
--dtb-file='${gem5_src_dir}/system/arm/dt/$([ "$arch" = arm ] && echo "armv7_gem5_v1_${cpus}cpu" || echo "armv8_gem5_v1_${cpus}cpu").dtb' \
--machine-type=VExpress_GEM5_V1 \
${extra_flags} \
"
  fi
else
  if "$kvm"; then
    extra_flags="${extra_flags} -enable-kvm"
  fi
  extra_flags="${extra_flags_qemu} ${extra_flags}"
  qemu_common="\
${debug_vm} \
'${buildroot_out_dir}/host/usr/bin/qemu-system-${arch}' \
-gdb tcp::1234 \
-m '${memory}' \
-monitor telnet::45454,server,nowait \
-netdev user,hostfwd=tcp::45455-:45455,hostfwd=tcp::45456-:22,id=net0 \
-smp '${cpus}' \
-trace 'enable=${trace_enable},file=${qemu_out_dir}/trace.bin' \
-virtfs 'local,path=${p9_dir},mount_tag=host_scratch,security_model=mapped,id=host_scratch' \
-virtfs 'local,path=${buildroot_out_dir}/build,mount_tag=host_out,security_model=mapped,id=host_out' \
$vnc \
"
  if "$initrd"; then
    extra_flags="${extra_flags} -initrd '${images_dir}/rootfs.cpio'"
  fi
  if "$ramfs"; then
    # TODO why is this needed, and why any string works.
    root='root=/dev/anything'
  fi
  # The base QEMU commands are found under board/qemu/*/readme.tx
  case "$arch" in
    x86_64)
      if "$kgdb"; then
        extra_append="${extra_append} kgdboc=ttyS0,115200"
      fi
      if ! "$ramfs"; then
        root='root=/dev/vda'
        extra_flags="${extra_flags} -drive file='${images_dir}/rootfs.ext2.qcow2,if=virtio,format=qcow2'"
      fi
      cmd="\
${qemu_common} \
-M pc \
-append '${root} nopat ${extra_append}' \
-device edu \
-device virtio-net-pci,netdev=net0 \
-kernel '${images_dir}/bzImage' \
${extra_flags} \
"
    ;;
    arm)
      if "$kgdb"; then
        extra_append="${extra_append} kgdboc=ttyAMA0,115200"
      fi
      if ! "$ramfs"; then
        extra_flags="${extra_flags} -drive file='${images_dir}/rootfs.ext2.qcow2,if=scsi,format=qcow2'"
        root='root=/dev/sda'
      fi
      cmd="\
$qemu_common \
-M versatilepb \
-append '${root} ${extra_append}' \
-device rtl8139,netdev=net0 \
-dtb '${images_dir}/versatile-pb.dtb' \
-kernel '${images_dir}/zImage' \
-serial stdio \
$extra_flags \
"
    ;;
    aarch64)
      if "$kgdb"; then
        extra_append="${extra_append} kgdboc=ttyAMA0,115200"
      fi
      if ! "$ramfs"; then
        root='root=/dev/vda'
        extra_flags="${extra_flags} -drive file='${images_dir}/rootfs.ext2.qcow2,if=virtio,format=qcow2'"
      fi
      cmd="\
${qemu_common} \
-M virt \
-append '${root} ${extra_append}' \
-cpu cortex-a57 \
-device virtio-net-device,netdev=net0 \
-kernel '${images_dir}/Image' \
-nographic \
-serial stdio \
${extra_flags} \
"
    ;;
    mips64)
      if ! "$ramfs"; then
        root='root=/dev/hda'
        extra_flags="${extra_flags} -drive file='${images_dir}/rootfs.ext2.qcow2,format=qcow2'"
      fi
      cmd="\
${qemu_common} \
-M malta \
-append '${root} ${extra_append}' \
-cpu I6400 \
-device pcnet \
-kernel '${images_dir}/vmlinux' \
-nographic \
${extra_flags} \
"
    ;;
  esac
fi
echo "$cmd" | tee run.log
eval "$cmd"
