#!/usr/bin/env bash
. "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common"
common_gem5=true
generate_checkpoints=true

parsed=$(getopt -o "C${common_getopt_flags}" -l "$common_getopt_flags_long" -- "$@")
eval set -- "$parsed"
while true; do
  case "$1" in
    -C)
      generate_checkpoints=false
      shift
      ;;
    *)
      common_getopt_case "$@"
      ;;
  esac
done
common_setup

# Vars
cmd="./run -a ${common_arch} -g"
cache_small='--caches --l2cache --l1d_size=1024   --l1i_size=1024   --l2_size=1024   --l3_size=1024  '
cache_large='--caches --l2cache --l1d_size=1024kB --l1i_size=1024kB --l2_size=1024kB --l3_size=1024kB'
results_file="${common_gem5_run_dir}/bench-cache.txt"

bench() (
  common_bench_cmd "$1" "$results_file"
  {
    printf 'cycles '
    ./gem5-stat -a "$common_arch"
    printf 'instructions '
    ./gem5-stat -a "$common_arch" sim_insts
    # RESTORE_INVESTIGATION
    #cycles_switch="$(./gem5-stat -a "$common_arch" system.switch_cpus.numCycles)"
    #if [ -n "$cycles_switch" ]; then
    #  printf "cycles_switch ${cycles_switch}\n"
    #fi
  } >> "$results_file"
)

bench-all() (
  bench "${cmd} -l 1 -- ${cache_small} --cpu-type=HPI --restore-with-cpu=HPI"
  bench "${cmd} -l 1 -- ${cache_large} --cpu-type=HPI --restore-with-cpu=HPI"
  # RESTORE_INVESTIGATION
  # These were mostly to investigate what happens on restore:
  # https://stackoverflow.com/questions/49011096/how-to-switch-cpu-models-in-gem5-after-restoring-a-checkpoint-and-then-observe-t
  #bench "${cmd} -l 1"
  #bench "${cmd} -l 1 -- ${cache_small}"
  #bench "${cmd} -l 1 -- ${cache_large}"
  #bench "${cmd} -l 2 -- ${cache_small}"
  #bench "${cmd} -l 3 -- ${cache_large}"
  #bench "${cmd} -l 4 -- ${cache_small} --cpu-type=HPI"
  #bench "${cmd} -l 5 -- ${cache_large} --cpu-type=HPI"
  ## Restore from At-- omicSimpleCPU to HPI.
  #bench "${cmd} -l 2 -- ${cache_small} --cpu-type=HPI --restore-with-cpu=HPI"
  #bench "${cmd} -l 3 -- ${cache_large} --cpu-type=HPI --restore-with-cpu=HPI"
  #bench "${cmd} -l 2 -- ${cache_small} --restore-with-cpu=HPI"
  #bench "${cmd} -l 3 -- ${cache_large} --restore-with-cpu=HPI"
  #bench "${cmd} -l 2 -- ${cache_small} --cpu-type=HPI"
  #bench "${cmd} -l 3 -- ${cache_large} --cpu-type=HPI"
  ## Restore HPI with different cache sizes and see if it is used.
  #bench "${cmd} -l 4 -- ${cache_large} --cpu-type=HPI"
  #bench "${cmd} -l 5 -- ${cache_small} --cpu-type=HPI"
  #bench "${cmd} -l 2 -- ${cache_large} --cpu-type=HPI"
  #bench "${cmd} -l 3 -- ${cache_small} --cpu-type=HPI"
)


if "$generate_checkpoints"; then
  # Create the checkpoints after the kernel boot.
  printf 'm5 exit' > "${common_gem5_readfile_file}"
  cpt_cmd="-E '/gem5.sh'"
  # RESTORE_INVESTIGATION
  ## 5
  #./eeval "$cmd $cpt_cmd -- $cache_large --cpu-type=HPI"
  ## 4
  #./eeval "$cmd $cpt_cmd -- $cache_small --cpu-type=HPI"
  ## 3
  #./eeval "$cmd $cpt_cmd -- $cache_large"
  ## 2
  #./eeval "$cmd $cpt_cmd -- $cache_small"
  # 1
  ./eeval "$cmd $cpt_cmd"
fi

# Restore and run benchmarks.
rm -f "$results_file"
printf '#!/bin/sh
m5 resetstats
dhrystone XXX
m5 exit
' >"${common_gem5_readfile_file}"
for n in 1000 10000 100000; do
  printf "n ${n}\n" >> "$results_file"
  sed -Ei "s/^dhrystone .*/dhrystone ${n}/" "${common_gem5_readfile_file}"
  bench-all
  printf "\n" >> "$results_file"
done
