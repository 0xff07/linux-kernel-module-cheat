#!/usr/bin/env bash
. "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common"
mkdir -p "${common_out_dir}"
br2_cli_file="${common_out_dir}/br2_cli"
rm -f "$br2_cli_file"
touch "$br2_cli_file"
kernel_config_fragment_cli_file="${common_out_dir}/kernel_config_fragment_cli"
kernel_config_fragment_cli_file_tmp="${kernel_config_fragment_cli_file}_tmp"
rm -f "$kernel_config_fragment_cli_file_tmp"
touch "$kernel_config_fragment_cli_file_tmp"
configure=true
config_fragments="${common_root_dir}/br2/default"
extra_make_args=
j="$(nproc)"
linux_reconfigure=false
linux_kernel_custom_config_file=
kernel_config_fragments=
post_script_args=
qemu_sdl='--enable-sdl --with-sdlabi=2.0'
v=0
parsed=$(getopt \
  -o "B:b:C:c:fGj:hIiK:klp:qSs:v${common_getopt_flags}" \
  -l "\
br-config,\
br-config-fragment,\
help,\
kernel-config,\
kernel-config-fragment,\
${common_getopt_flags_long}\
" \
-- "$@")
eval set -- "$parsed"
while true; do
  case "$1" in
    -B|--br-config)
      echo "$2" >> "$br2_cli_file"
      shift 2
      ;;
    -b|--br-config-fragment)
      config_fragments="${config_fragments} $(common_abspath "$2")"
      shift 2
      ;;
    -C|--kernel-config)
      echo "$2" >> "$kernel_config_fragment_cli_file_tmp"
      shift 2
      ;;
    -c|--kernel-config-fragment)
      kernel_config_fragments="${kernel_config_fragments} $(common_abspath "$2")"
      shift 2
      ;;
    -f)
      configure=false
      shift
      ;;
    -h)
      echo "https://github.com/cirosantilli/linux-kernel-module-cheat#build" 2>&1
      exit
      ;;
    -I)
      echo "
BR2_TARGET_ROOTFS_CPIO=n
BR2_TARGET_ROOTFS_EXT2=n
BR2_TARGET_ROOTFS_INITRAMFS=y
" >> "$br2_cli_file"
      shift
      ;;
    -i)
      echo "
BR2_TARGET_ROOTFS_CPIO=y
BR2_TARGET_ROOTFS_EXT2=n
BR2_TARGET_ROOTFS_INITRAMFS=n
" >> "$br2_cli_file"
      shift
      ;;
    -j)
      j="$2"
      shift 2
      ;;
    -K)
      linux_kernel_custom_config_file="$(common_abspath "$2")"
      shift 2
      ;;
    -k)
      extra_make_args="${extra_make_args} kernel_module-reconfigure \\
"
      shift
      ;;
    -l)
      linux_reconfigure=true
      extra_make_args="${extra_make_args} linux-reconfigure \\
"
      shift
      ;;
    -p)
      post_script_args="$2"
      shift 2
      ;;
    -q)
      extra_make_args="${extra_make_args} host-qemu-reconfigure \\
"
      shift
      ;;
    -S)
      qemu_sdl=
      shift
      ;;
    -v)
      v=1
      shift
      ;;
    *)
      common_getopt_case "$@"
      ;;
  esac
done
if "$common_gem5"; then
  extra_make_args="${extra_make_args} gem5-reconfigure \\
"
fi
extra_make_args="${extra_make_args} $@"
common_setup
config_file="${common_buildroot_out_dir}/.config"
case "$common_arch" in
  x86_64)
    defconfig=qemu_x86_64_defconfig
  ;;
  arm)
    defconfig=qemu_arm_vexpress_defconfig
  ;;
  aarch64)
    defconfig=qemu_aarch64_virt_defconfig
  ;;
  mips64)
    defconfig=qemu_mips64r6_malta_defconfig
  ;;
esac
config_fragments="${config_fragments} ${common_root_dir}/br2/qemu ${br2_cli_file}"

time {
# Configure.
if "$configure"; then
  if ! cmp "${kernel_config_fragment_cli_file}" "${kernel_config_fragment_cli_file_tmp}"; then
    # Only copy if modified, otherwise the kernel always rebuilds.
    cp "${kernel_config_fragment_cli_file_tmp}" "${kernel_config_fragment_cli_file}" 
  fi
  cd "${common_buildroot_dir}"
  for p in $(find "${common_root_dir}/patches/buildroot/" -maxdepth 1 -name '*.patch' -print); do
    patch -N -r - -p 1 < "$p" || :
  done
  br2_external='../kernel_module:../gem5:../parsec-benchmark'
  packages_dir="${common_root_dir}/packages"
  for package_dir in "${packages_dir}"/*/; do
    br2_external="${br2_external}:../packages/$(basename "${package_dir}")"
  done
  make O="$common_buildroot_out_dir" BR2_EXTERNAL="$br2_external" "$defconfig"
  # TODO Can't get rid of these for now.
  # http://stackoverflow.com/questions/44078245/is-it-possible-to-use-config-fragments-with-buildroots-config
  for config_fragment in $config_fragments; do
    cat "$config_fragment" >> "$config_file"
  done
  printf "
BR2_JLEVEL=${j}
BR2_DL_DIR=\"${common_dir}/dl\"
BR2_ROOTFS_POST_SCRIPT_ARGS=\"${post_script_args}\"
" >> "$config_file"
  if "$common_gem5"; then
    printf "BR2_PACKAGE_GEM5=y\n" >> "${config_file}"
  fi
  kernel_config_fragment_dir=../kernel_config_fragment
  if [ -n "$linux_kernel_custom_config_file" ]; then
    if [ -f "$linux_kernel_custom_config_file" ]; then
      printf "BR2_LINUX_KERNEL_USE_CUSTOM_CONFIG=y\nBR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE=\"${linux_kernel_custom_config_file}\"\n" >> "$config_file"
      if "${linux_reconfigure}"; then
        touch "${linux_kernel_custom_config_file}"
      fi
    else
      echo "error: -K: file does not exist: ${linux_kernel_custom_config_file}" 1>&2
      exit 1
    fi
    default_config_fragments=
  else
    default_config_fragments="${kernel_config_fragment_dir}/min ${kernel_config_fragment_dir}/default ${kernel_config_fragment_dir}/display"
  fi
  printf "BR2_LINUX_KERNEL_CONFIG_FRAGMENT_FILES=\"${default_config_fragments} ${kernel_config_fragments} ${kernel_config_fragment_cli_file}\"\n" >> "$config_file"
  if "${linux_reconfigure}"; then
    # https://stackoverflow.com/questions/49260466/why-when-i-change-br2-linux-kernel-custom-config-file-and-run-make-linux-reconfi
    touch "${kernel_config_fragment_dir}/min"
  fi
  if [ "$common_arch" = 'mips64' ]; then
    # Workaround for: https://bugs.busybox.net/show_bug.cgi?id=10276
    sed -Ei 's/^BR2_PACKAGE_LINUX_TOOLS_GPIO/BR2_PACKAGE_LINUX_TOOLS_GPIO=n/' "$config_file"
  fi
  make O="$common_buildroot_out_dir" olddefconfig
fi
  echo 'config time:'
}
echo

common_mkdir

# Manage Linux kernel and QEMU variants.
symlink_buildroot_variant() (
  custom_dir="$1"
  variant_dir="$2"
  if [ -h "$custom_dir" ]; then
    rm "$custom_dir"
  elif [ -d "$custom_dir" ]; then
    # Migration for existing builds.
    mv "$custom_dir" "$variant_dir"
  fi
  mkdir -p "$variant_dir"
  ln -s "$variant_dir" "$custom_dir"
)
symlink_buildroot_variant "$common_linux_custom_dir" "$common_linux_variant_dir"
symlink_buildroot_variant "$common_qemu_custom_dir" "$common_qemu_variant_dir"
# TODO: this breaks the build. But then I noticed that it wouldn't make sense,
# because this is a guest tool, and we don't have image variants yet. Some other day maybe.
#symlink_buildroot_variant "$common_qemu_guest_custom_dir" "$common_qemu_guest_variant_dir"

# Manage gem5 variants.
if "$common_gem5"; then
  if [ ! -e "${common_gem5_src_dir}/.git" ]; then
    git -C "$common_gem5_default_src_dir" worktree add -b "wt/${common_gem5_variant}" "${common_gem5_src_dir}"
  fi
fi

cd "$common_buildroot_dir"
# HOST_QEMU_OPTS is a hack that happens to work because the QEMU package luckly uses += at all times.
# It shouldn't be necessary in the first place: https://bugs.busybox.net/show_bug.cgi?id=9936
#
# Even if were an autotools package, there is no general way currently to pass extra configs to it:
# https://stackoverflow.com/questions/44341188/how-to-pass-extra-custom-configure-autotools-options-to-a-buildroot-package/44341225#44341225
#
# BR2_ options may be given on the command line here, and they do have direct "define" effects.
# But this is generally bad, as it skips the Kconfig mechanism, e.g. it does not set defaults properly.
cmd="time \\
env \\
-u LD_LIBRARY_PATH \\
make \\
O='${common_buildroot_out_dir}' \\
HOST_QEMU_OPTS='--enable-debug --enable-trace-backends=simple ${qemu_sdl}' \\
GEM5_LKMC_GEM5_BUILD_TYPE="$common_gem5_build_type" \\
GEM5_LKMC_OUTDIR="$common_gem5_out_dir" \\
GEM5_LKMC_SRCDIR="$common_gem5_src_dir" \\
V='${v}' \\
${extra_make_args} \
all \\
"
"${common_root_dir}/eeval" "$cmd" "${common_out_arch_dir}/build.sh"
